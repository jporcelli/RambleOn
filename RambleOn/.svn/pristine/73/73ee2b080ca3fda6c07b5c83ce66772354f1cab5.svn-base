package rambleon;

import accountdata.AbstractActiveAccountsTableModel;
import accountdata.Account;
import accountdata.AccountDataManager;
import accountdata.AccountStatistics;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import static rambleon.RambleOnSettings.*;
import java.awt.Image;
import java.awt.Insets;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import java.util.TreeMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import rambleonevents.AccountSelectionHandler;
import rambleonevents.CreateAccountButtonHandler;
import rambleonevents.WelcomePageHandler;
import rambleonevents.WorldTreeHandler;
import worlddata.Region;

/**
 *
 * @author James C. Porcelli
 */
public class RambleOnScreenManager {

    //COMPONENTS USED FOR THE GAME SCREENS
    private JFrame window;
    private JPanel welcomeScreen, accountsScreen, accountCreationScreen, currentAccountScreen,
            accountsScreenTablePanel, accountsScreenButtonPanel, accountsScreenCommentsPanel,
            accountsScreenTitlePanel, regionsPlayedTreePanel, currentAccountStatsPanel, currentAccountButtonPanel;
    private JButton welcomeScreenButton, newUserAccountButton, accountCreationOk, accountCreationCancel;
    private JSplitPane splitPane;
    private JScrollPane scrollPane;
    private JLabel accountsPageHeaderLabel, createNewUserLabel, accountMenuBanner, subRegionModeLabel, capitalModeLabel,
            leaderModeLabel, flagModeLabel, fastestTimeLabel, timesPlayedLabel, highScoreLabel;
    private JTree regionsPlayedTree;
    private DefaultTreeModel regionsPlayedTreeModel;
    private JTable table, statsTable;
    private JTextField newUserName;
    AccountDataManager accountsManager;

    /**
     *
     */
    public RambleOnScreenManager() {
        window = new JFrame("RambleOn");
        window.setSize(GAME_WIDTH, GAME_HEIGHT);
        window.setResizable(false);
        window.setLayout(new BorderLayout());

        accountsManager = new AccountDataManager();
        initWelcomeScreen();
        initAccountsScreen();

        //TEMPORARY DURING BETA
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    public AccountDataManager getAccountsManager() {
        return accountsManager;
    }

    /**
     * This method helps us load a bunch of images and ensure they are fully
     * loaded when we want to use them.
     *
     * @param imageFile The path and name of the image file to load.
     *
     * @param tracker This will help ensure all the images are loaded.
     *
     * @param id A unique identifier for each image in the tracker. It will only
     * wait for ids it knows about.
     *
     * @return A constructed image that has been registered with the tracker.
     * Note that the image's data has not necessarily been fully loaded when
     * this method ends.
     */
    private Image batchLoadImage(String imageFile, MediaTracker tracker, int id) {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Image img = tk.getImage(imageFile);
        tracker.addImage(img, id);
        return img;
    }

    /**
     * Waits of all the media given to the media tracker to fully load so that
     * they can be used by the program. Note that if we don't do this we may end
     * up with missing images for our GUI icons.
     *
     * @param tracker The tracker that already has images it is keeping an eye
     * on.
     */
    public void waitForMediaTracker(MediaTracker tracker) {
        // NOW THE MEDIA TRACKER WILL MAKE SURE ALL THE IMAGES
        // ARE DONE LOADING BEFORE WE GO ON
        try {
            tracker.waitForAll();
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        }
    }

    /**
     * Sets up everything a button needs except how it is laid out, since we'll
     * have buttons put in toolbars that use FlowLayout
     *
     * @param imageFile The image to use for the button.
     *
     * @param parent The container inside which to put the button. Note that for
     * this GUI, we'll always assume FlowLayout.
     *
     * @param tracker This makes sure our button fully loads.
     *
     * @param id A unique id for the button so the tracker knows it's there.
     *
     * @param tooltip The mouse-over text for the button.
     *
     * @param eventHandler The listener that will respond to presses on this
     * button.
     *
     * @return A fully constructed and initialized button with all the data
     * provided to it as arguments. Note that it has not been laid out inside a
     * container yet, as that will be a custom operation.
     */
    private JButton initGenericButton(String imageFile,
            MediaTracker tracker,
            int id,
            String tooltip,
            ActionListener eventHandler) {
        // LOAD THE IMAGE AND MAKE AN ICON
        Image img = batchLoadImage(imageFile, tracker, id);
        ImageIcon ii = new ImageIcon(img);

        // MAKE THE BUTTON THAT WE'LL END UP RETURNING
        JButton createdButton = new JButton();

        // NOW SETUP OUR BUTTON FOR USE

        // GIVE IT THE ICON
        createdButton.setIcon(ii);

        // GIVE IT THE MOUSE-OVER TEXT
        createdButton.setToolTipText(tooltip);

        // INSETS ARE SPACING INSIDE THE BUTTON,
        // TOP LEFT RIGHT BOTTOM
        Insets buttonMargin = new Insets(
                BUTTON_INSET, BUTTON_INSET, BUTTON_INSET, BUTTON_INSET);
        createdButton.setMargin(buttonMargin);

        // INIT THE EVENT HANDLERS - NOTE WE'RE USING THE TOOLTIP
        // AS THE ACTION COMMAND SINCE THEY ARE UNIQUE FOR EACH BUTTON
        createdButton.setActionCommand(tooltip);
        createdButton.addActionListener(eventHandler);

        // AND RETURN THE CREATED BUTTON
        return createdButton;
    }

    /**
     * Create and initialize the accounts screen panel.
     */
    private void initAccountsScreen() {
        accountsScreen = new JPanel();
        accountsScreenTablePanel = new JPanel();
        accountsScreenButtonPanel = new JPanel();
        accountsScreenCommentsPanel = new JPanel();
        accountsScreenTitlePanel = new JPanel();
        MediaTracker tracker = new MediaTracker(window);

        accountsScreen.setBorder(TOOLBAR_BORDER);
        accountsScreenButtonPanel.setBorder(TOOLBAR_BORDER);
        accountsScreenTablePanel.setBorder(TOOLBAR_BORDER);
        accountsScreenCommentsPanel.setBorder(TOOLBAR_BORDER);
        accountsScreenTitlePanel.setBorder(TOOLBAR_BORDER);

        accountsScreen.setLayout(new BorderLayout());
        accountsScreenTablePanel.setLayout(new BorderLayout());
        accountsScreenButtonPanel.setLayout(new BorderLayout());
        accountsScreenCommentsPanel.setLayout(new BorderLayout());

        CreateAccountButtonHandler createAccountButtonHandler = new CreateAccountButtonHandler(this);
        AccountSelectionHandler accountSelectionHandler = new AccountSelectionHandler(this);

        newUserAccountButton = initGenericButton(ARTWORK_PATH + NEW_ACCOUNT_BUTTON_ICON_FILE, tracker, 0, NEW_USER_TOOLTIP, createAccountButtonHandler);
        newUserAccountButton.setBorder(TOOLBAR_BORDER);

        createNewUserLabel = new JLabel(CREATE_NEWUSER_LABEL);
        createNewUserLabel.setBorder(TOOLBAR_BORDER);
        createNewUserLabel.setFont(CREATE_NEWUSER_LABEL_FONT);
        createNewUserLabel.setForeground(new Color(116, 220, 89));

        accountsScreenButtonPanel.add(createNewUserLabel);
        accountsScreenButtonPanel.setBackground(new Color(3, 44, 152));
        accountsScreenButtonPanel.add(newUserAccountButton, BorderLayout.LINE_START);

        table = new JTable(new AbstractActiveAccountsTableModel(accountsManager.getUserNames()));
        table.setBorder(TOOLBAR_BORDER);
        table.getSelectionModel().addListSelectionListener(accountSelectionHandler);
        table.setPreferredScrollableViewportSize(new Dimension(500, 400));
        table.setFillsViewportHeight(true);
        table.setAutoCreateRowSorter(true);
        table.setRowHeight(60);

        table.setBackground(new Color(3, 44, 152));
        table.setFont(ACCOUNTS_PAGE_HEADER_FONT);
        table.setForeground(Color.red);

        scrollPane = new JScrollPane(table);
        scrollPane.setBorder(TOOLBAR_BORDER);

        accountsPageHeaderLabel = new JLabel(ACCOUNTS_PAGE_TITLE_HEADER);
        accountsPageHeaderLabel.setForeground(new Color(116, 220, 89));
        accountsPageHeaderLabel.setBorder(TOOLBAR_BORDER);
        accountsPageHeaderLabel.setFont(ACCOUNTS_PAGE_HEADER_FONT);

        accountsScreenTitlePanel.add(accountsPageHeaderLabel);
        accountsScreenTitlePanel.setBackground(new Color(3, 44, 152));

        accountsScreenButtonPanel.add(accountsScreenTitlePanel, BorderLayout.LINE_END);

        accountMenuBanner = loadImageToLabel(ARTWORK_PATH + ACCOUNT_MENU_BANNER_FILE);

        accountsScreenCommentsPanel.add(accountMenuBanner);

        accountsScreenTablePanel.add(scrollPane, BorderLayout.CENTER);
        splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, accountsScreenCommentsPanel, accountsScreenTablePanel);
        splitPane.setDividerLocation(SPLIT_PANE_LEFT_LOCATION);

        accountsScreen.add(splitPane, BorderLayout.CENTER);
        accountsScreen.add(accountsScreenButtonPanel, BorderLayout.NORTH);

        waitForMediaTracker(tracker);

    }

    /**
     *
     */
    public void initCurrentAccountScreen() {
        MediaTracker tracker = new MediaTracker(window);
        currentAccountScreen = new JPanel();
        regionsPlayedTreePanel = new JPanel();
        currentAccountStatsPanel = new JPanel();
        currentAccountButtonPanel = new JPanel();
        splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, regionsPlayedTreePanel, currentAccountStatsPanel);
        regionsPlayedTree = new JTree();

        initTree();

        currentAccountScreen.setBorder(TOOLBAR_BORDER);
        regionsPlayedTreePanel.setBorder(TOOLBAR_BORDER);
        currentAccountStatsPanel.setBorder(TOOLBAR_BORDER);
        currentAccountButtonPanel.setBorder(TOOLBAR_BORDER);
        splitPane.setBorder(TOOLBAR_BORDER);

        currentAccountScreen.setLayout(new BorderLayout());
        currentAccountStatsPanel.setLayout(new BorderLayout());

        initRegionsPlayedTree();
        regionsPlayedTreePanel.add(scrollPane);



        currentAccountScreen.add(currentAccountButtonPanel, BorderLayout.NORTH);
        currentAccountScreen.add(splitPane);
        waitForMediaTracker(tracker);
    }

    public void addTableToPanel(AccountStatistics currentPlayerStats) {
        subRegionModeLabel = new JLabel("Sub Region Mode");
        capitalModeLabel = new JLabel("Capital Mode");
        leaderModeLabel = new JLabel("Leader Mode");
        flagModeLabel = new JLabel("Flag Mode");
        fastestTimeLabel = new JLabel("Fastest Time");
        timesPlayedLabel = new JLabel("Times Played");
        highScoreLabel = new JLabel("High Score");

        currentAccountStatsPanel.setLayout(new GridBagLayout());
        statsTable = currentPlayerStats.getModeStats();
        statsTable.setRowHeight(80);
        statsTable.setBorder(TOOLBAR_BORDER);
        statsTable.setBackground(new Color(3, 44, 152));
        statsTable.setFont(ACCOUNTS_PAGE_HEADER_FONT);
        statsTable.setForeground(Color.red);
        addComponentToAccountStatsPanel(statsTable, 5, 5, 5, 5);
        refreshWindow();
    }

    private void addComponentToAccountStatsPanel(Component componentToAdd,
            int col, int row, int colSpan, int rowSpan) {
        // EMPLOY GRID BAG LAYOUT TO PUT IT IN THE PANEL
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = col;
        gbc.gridy = row;
        gbc.gridwidth = colSpan;
        gbc.gridheight = rowSpan;
        gbc.ipadx = REGION_EDITOR_CONTROLS_IPADX;
        gbc.ipady = REGION_EDITOR_CONTROLS_IPADY;
        gbc.insets = REGION_CONTROLS_INSETS;
        gbc.fill = GridBagConstraints.BOTH;
        currentAccountStatsPanel.add(componentToAdd, gbc);
    }

    /**
     * Initializes the tree with the proper data, including setting up the
     * tree's data model.
     *
     * NOTE - THIS METHOD IS INCOMPLETE AS IS THE STATE OF THIS APPLICATION. FOR
     * NOW OUR TREE WILL JUST CONSIST OF ONE BRANCH WITH THE NAMES OF ALL
     * REGIONS "PLAYED" ON IT. ONCE WE HAVE THE WORLD DATA IN HW6 WE CAN KEEP
     * THE TREE IN A MORE LOGICALLY ORDERED STATE BY WORLD, CONTINENT, COUNTRY,
     * STATE, ETC.
     */
    public void initRegionsPlayedTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(TEMP_REGIONS_PLAYED_ROOT);

        // IF FIRST TIME, MAKE MODEL
        if (regionsPlayedTreeModel == null) {
            regionsPlayedTreeModel = new DefaultTreeModel(root);
            regionsPlayedTree.setModel(regionsPlayedTreeModel);
        } else {
            regionsPlayedTreeModel.setRoot(root);
        }

        //GET THE LIST OF REGIONS PLAYED FOR THE CURRENT USER AND SORT IT
        Collections.sort(accountsManager.getCurrentAccount().getRegionsPlayed());

        // BUILD THE REST OF THE TREE
        Iterator<String> regionsPlayedIterator = accountsManager.getCurrentAccount().getRegionsPlayed().iterator();
        while (regionsPlayedIterator.hasNext()) {
            addSubRegionsToTree(regionsPlayedIterator.next(), root);
        }
        selectRootNode();
    }

    /**
     * Selects the root node in the tree and opens the tree to display its
     * children.
     */
    public void selectRootNode() {
        regionsPlayedTree.setSelectionRow(0);
        openFirstRowOfWorldTree();
    }

    /**
     * This method opens all the child nodes of the root. We use this when the
     * application first starts.
     */
    public void openFirstRowOfWorldTree() {
        regionsPlayedTree.expandRow(0);
    }

    /**
     *
     *
     * @param regionToAdd
     * @param parentNode
     *
     * NOTE - THIS METHOD IS INCOMPLETE AS IS THE STATE OF THIS APPLICATION. FOR
     * NOW OUR TREE WILL JUST CONSIST OF ONE BRANCH WITH THE NAMES OF ALL
     * REGIONS "PLAYED" ON IT. ONCE WE HAVE THE WORLD DATA IN HW6 WE CAN KEEP
     * THE TREE IN A MORE LOGICALLY ORDERED STATE BY WORLD, CONTINENT, COUNTRY,
     * STATE, ETC.
     */
    private void addSubRegionsToTree(String regionToAdd, DefaultMutableTreeNode parentNode) {
        DefaultMutableTreeNode regionPlayedNode = new DefaultMutableTreeNode(regionToAdd);

        regionsPlayedTreeModel.insertNodeInto(regionPlayedNode, parentNode, parentNode.getChildCount());
    }

    /**
     * Initializes the world tree, loading it with the geographic data currently
     * found inside the data manager. Note that this method is only called once,
     * after a world data XML file is loaded.
     */
    private void initTree() {
        // INIT THE TREE
        regionsPlayedTree = new JTree();

        // MAKE IT SCROLLABLE
        scrollPane = new JScrollPane(regionsPlayedTree);

        // AND HOOK UP THE TREE LISTENER
        WorldTreeHandler treeHandler = new WorldTreeHandler(this);
        regionsPlayedTree.addTreeSelectionListener(treeHandler);
    }

    /**
     *
     * @param filePath
     * @return
     */
    private JLabel loadImageToLabel(String filePath) {
        JLabel label = null;

        try {
            BufferedImage myPicture = ImageIO.read(new File(filePath));
            label = new JLabel(new ImageIcon(myPicture));
        } catch (IOException a) {
            a.printStackTrace();
        }

        return label;
    }

    /**
     * Create and initialize the welcome screen panel.
     */
    private void initWelcomeScreen() {
        MediaTracker tracker = new MediaTracker(window);
        welcomeScreen = new JPanel();

        welcomeScreen.setLayout(new BorderLayout());

        WelcomePageHandler welcomeHandler = new WelcomePageHandler(this);

        //THE WELCOME SCREEN WILL CONSIST OF A WELCOME PAGE IMAGE THAT IS ONE LARGE BUTTON
        welcomeScreenButton = initGenericButton(ARTWORK_PATH + WELCOME_SCREEN_FILE, tracker, 0, WELCOME_SCREEN_TOOLTIP, welcomeHandler);

        welcomeScreen.add(welcomeScreenButton, BorderLayout.CENTER);

        waitForMediaTracker(tracker);
    }

    /**
     * To start the application we load the WelcomeScreen. The event handling
     * takes care of going from one screen to the next.
     */
    public void startApp() {
        //THE APP STARTS FROM THE WELCOME SCREEN AND PROGRESSES 
        window.add(welcomeScreen, BorderLayout.CENTER);
        window.setVisible(true);
    }

    /**
     * Refreshes the window after removing one panel and adding another when
     * going to and from the different game screens.
     */
    public void refreshWindow() {
        window.repaint();
        window.revalidate();
    }

    /**
     *
     * @return
     */
    public JFrame getWindow() {
        return window;
    }

    /**
     *
     * @param window
     */
    public void setWindow(JFrame window) {
        this.window = window;
    }

    /**
     *
     * @return
     */
    public JPanel getWelcomeScreen() {
        return welcomeScreen;
    }

    /**
     *
     * @param welcomeScreen
     */
    public void setWelcomeScreen(JPanel welcomeScreen) {
        this.welcomeScreen = welcomeScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getAccountsScreen() {
        return accountsScreen;
    }

    /**
     *
     * @param AccountsScreen
     */
    public void setAccountsScreen(JPanel AccountsScreen) {
        this.accountsScreen = AccountsScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getAccountCreationScreen() {
        return accountCreationScreen;
    }

    /**
     *
     * @param accountCreationScreen
     */
    public void setAccountCreationScreen(JPanel accountCreationScreen) {
        this.accountCreationScreen = accountCreationScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getCurrentAccountScreen() {
        return currentAccountScreen;
    }

    /**
     *
     * @param currentAccountScreen
     */
    public void setCurrentAccountScreen(JPanel currentAccountScreen) {
        this.currentAccountScreen = currentAccountScreen;
    }

    /**
     *
     * @return
     */
    public JButton getWelcomeScreenButton() {
        return welcomeScreenButton;
    }

    /**
     *
     * @param welcomeScreenButton
     */
    public void setWelcomeScreenButton(JButton welcomeScreenButton) {
        this.welcomeScreenButton = welcomeScreenButton;
    }
}
