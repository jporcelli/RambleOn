package rambleon;

//IMPORT ALL THE LIBRARIES AND CLASSES WELL NEED
import static rambleon.RambleOnSettings.*;
import accountdata.AbstractActiveAccountsTableModel;
import accountdata.AbstractModeStatsTableModel;
import accountdata.Account;
import accountdata.AccountDataManager;
import accountdata.AccountStatistics;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.TileObserver;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import rambleonevents.AccountSelectionHandler;
import rambleonevents.CreateAccountButtonHandler;
import rambleonevents.CurrentAccountButtonsHandler;
import rambleonevents.WelcomePageHandler;
import rambleonevents.WorldTreeHandler;

/**
 * The RambleOnScreenManager is used to manager any non-game play screens such
 * as any menu based screens. This screen manager will take us from the start up
 * screen through the current account screen where control will be passed to the
 * mini-game framework to run the actual game.
 *
 * @author James C. Porcelli, SBU ID 108900819
 */
public class RambleOnScreenManager {

    //COMPONENTS USED FOR THE GAME SCREENS
    private JFrame window;
    private JPanel welcomeScreen, accountsScreen, accountCreationScreen, currentAccountScreen,
            accountsScreenTablePanel, accountsScreenButtonPanel, accountsScreenCommentsPanel,
            accountsScreenTitlePanel, regionsPlayedTreePanel, currentAccountStatsPanel, currentAccountButtonPanel,
            currentAccountTitlePanel;
    private JButton welcomeScreenButton, newUserAccountButton, accountCreationOk, accountCreationCancel, backToAccountsButton,
            toGameModeButton;
    private JSplitPane splitPane;
    private JScrollPane scrollPane;
    private JLabel accountsPageHeaderLabel, createNewUserLabel, accountMenuBanner, subRegionModeLabel, capitalModeLabel,
            leaderModeLabel, flagModeLabel, fastestTimeLabel, timesPlayedLabel, highScoreLabel, backToAccountsLabel,
            playRambleOnLabel, currentAccountPageHeaderLabel, currentAccountIcon, currentPlayerStatsLabel;
    private JTree regionsPlayedTree;
    private DefaultTreeModel regionsPlayedTreeModel;
    private JTable accountsTable, statsTable;
    private JTextField newUserName;
    AccountDataManager accountsManager;

    /**
     * Creates an instance of a RambleOn screen manager. All necessary data
     * needed to start the application is initialized in this method.
     */
    public RambleOnScreenManager() {
        window = new JFrame("RambleOn");
        window.setSize(GAME_WIDTH, GAME_HEIGHT);
        window.setResizable(false);
        window.setLayout(new BorderLayout());

        accountsManager = new AccountDataManager();
        initWelcomeScreen();
        initAccountsScreen();
        
        //TEMPORARY DURING BETA
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     *
     * @return
     */
    public AccountDataManager getAccountsManager() {
        return accountsManager;
    }

    /**
     * This method helps us load a bunch of images and ensure they are fully
     * loaded when we want to use them.
     *
     * @param imageFile The path and name of the image file to load.
     *
     * @param tracker This will help ensure all the images are loaded.
     *
     * @param id A unique identifier for each image in the tracker. It will only
     * wait for ID's it knows about.
     *
     * @return A constructed image that has been registered with the tracker.
     * Note that the images data has not necessarily been fully loaded when this
     * method ends.
     */
    private Image batchLoadImage(String imageFile, MediaTracker tracker, int id) {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Image img = tk.getImage(imageFile);
        tracker.addImage(img, id);
        return img;
    }

    /**
     * Waits of all the media given to the media tracker to fully load so that
     * they can be used by the program. Note that if we don't do this we may end
     * up with missing images for our GUI icons.
     *
     * @param tracker The tracker that already has images it is keeping an eye
     * on.
     */
    public void waitForMediaTracker(MediaTracker tracker) {
        // NOW THE MEDIA TRACKER WILL MAKE SURE ALL THE IMAGES
        // ARE DONE LOADING BEFORE WE GO ON
        try {
            tracker.waitForAll();
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        }
    }

    /**
     * Sets up everything a button needs except how it is laid out, since we'll
     * have buttons put in tool bars that use FlowLayout
     *
     * @param imageFile The image to use for the button.
     *
     * @param parent The container inside which to put the button. Note that for
     * this GUI, we'll always assume FlowLayout.
     *
     * @param tracker This makes sure our button fully loads.
     *
     * @param id A unique id for the button so the tracker knows it's there.
     *
     * @param tooltip The mouse-over text for the button.
     *
     * @param eventHandler The listener that will respond to presses on this
     * button.
     *
     * @return A fully constructed and initialized button with all the data
     * provided to it as arguments. Note that it has not been laid out inside a
     * container yet, as that will be a custom operation.
     */
    private JButton initGenericButton(String imageFile,
            MediaTracker tracker,
            int id,
            String tooltip,
            ActionListener eventHandler) {
        // LOAD THE IMAGE AND MAKE AN ICON
        Image img = batchLoadImage(imageFile, tracker, id);
        ImageIcon ii = new ImageIcon(img);

        // MAKE THE BUTTON THAT WE'LL END UP RETURNING
        JButton createdButton = new JButton();

        // NOW SETUP OUR BUTTON FOR USE

        // GIVE IT THE ICON
        createdButton.setIcon(ii);

        // GIVE IT THE MOUSE-OVER TEXT
        createdButton.setToolTipText(tooltip);

        // INSETS ARE SPACING INSIDE THE BUTTON,
        // TOP LEFT RIGHT BOTTOM
        Insets buttonMargin = new Insets(
                BUTTON_INSET, BUTTON_INSET, BUTTON_INSET, BUTTON_INSET);
        createdButton.setMargin(buttonMargin);

        // INIT THE EVENT HANDLERS - NOTE WE'RE USING THE TOOLTIP
        // AS THE ACTION COMMAND SINCE THEY ARE UNIQUE FOR EACH BUTTON
        createdButton.setActionCommand(tooltip);
        createdButton.addActionListener(eventHandler);

        // AND RETURN THE CREATED BUTTON
        return createdButton;
    }

    /**
     * Create and initialize the RambleOn active player accounts screen.
     */
    private void initAccountsScreen() {
        //CREATE ALL THE COMPONENTS THAT MAKE UP THE ACCOUNTS SCREEN
        accountsScreen = new JPanel();
        accountsScreenTablePanel = new JPanel();
        accountsScreenButtonPanel = new JPanel();
        accountsScreenCommentsPanel = new JPanel();
        accountsScreenTitlePanel = new JPanel();
        MediaTracker tracker = new MediaTracker(window);
        createNewUserLabel = new JLabel(CREATE_NEWUSER_LABEL);
        accountsPageHeaderLabel = new JLabel(ACCOUNTS_PAGE_TITLE_HEADER);

        //ADD THE RAMBLE ON STYLE TO THE LABELS
        addRambleOnStyleToLabel(createNewUserLabel, LABEL_FONT, true, RAMBLE_ON_GREEN);
        addRambleOnStyleToLabel(accountsPageHeaderLabel, HEADER_FONT, true, RAMBLE_ON_GREEN);

        //SET THE BORDER OF THE COMPONENTS
        accountsScreen.setBorder(TOOLBAR_BORDER);
        accountsScreenButtonPanel.setBorder(TOOLBAR_BORDER);
        accountsScreenTablePanel.setBorder(TOOLBAR_BORDER);
        accountsScreenCommentsPanel.setBorder(TOOLBAR_BORDER);
        accountsScreenTitlePanel.setBorder(TOOLBAR_BORDER);

        //SET THE LAYOUT OF ANY COMPONENTS THAT REQUIRE ONE
        accountsScreen.setLayout(new BorderLayout());
        accountsScreenTablePanel.setLayout(new BorderLayout());
        accountsScreenButtonPanel.setLayout(new BorderLayout());
        accountsScreenCommentsPanel.setLayout(new BorderLayout());

        //CREATE THE LISTENERS FOR THE BUTTON AND TABLE
        CreateAccountButtonHandler createAccountButtonHandler = new CreateAccountButtonHandler(this);
        AccountSelectionHandler accountSelectionHandler = new AccountSelectionHandler(this);

        //CREATE THE BUTTON
        newUserAccountButton = initGenericButton(ARTWORK_PATH + NEW_ACCOUNT_BUTTON_ICON_FILE, tracker, 0, NEW_USER_TOOLTIP, createAccountButtonHandler);
        newUserAccountButton.setBorder(TOOLBAR_BORDER);

        //CREATE THE BUTTON PANEL
        accountsScreenButtonPanel.add(createNewUserLabel);
        accountsScreenButtonPanel.setBackground(RAMBLE_ON_BLUE);
        accountsScreenButtonPanel.add(newUserAccountButton, BorderLayout.LINE_START);

        //CREATE THE ACTIVE RAMBLE ON PLAYER ACCOUNTS TABLE
        accountsTable = new JTable(new AbstractActiveAccountsTableModel(accountsManager.getUserNames()));
        accountsTable.setBorder(TOOLBAR_BORDER);
        //ADD THE TABLE LISTENER
        accountsTable.getSelectionModel().addListSelectionListener(accountSelectionHandler);
        //SET SOME CUSTOM PREFERENCES FOR THE TABLE
        accountsTable.setPreferredScrollableViewportSize(new Dimension(500, 400));
        accountsTable.setFillsViewportHeight(true);
        accountsTable.setAutoCreateRowSorter(true);
        accountsTable.setRowHeight(ACCOUNTS_TABLE_ROW_HEIGHT);

        //GIVE THE TABLE SOME RAMBLE ON STYLE 
        accountsTable.setBackground(RAMBLE_ON_BLUE);
        accountsTable.setFont(LABEL_FONT);
        accountsTable.setForeground(Color.red);

        //CREATE THE SCROLL PANE        
        scrollPane = new JScrollPane(accountsTable);
        scrollPane.setBorder(TOOLBAR_BORDER);

        //CREATE THE SCREEN TITLE PANEL
        accountsScreenTitlePanel.add(accountsPageHeaderLabel);
        accountsScreenTitlePanel.setBackground(RAMBLE_ON_BLUE);
        //AND ADD THE TITLE PANEL TO THE PANEL IN THE NORTH REGION OF THE SCREEN
        accountsScreenButtonPanel.add(accountsScreenTitlePanel, BorderLayout.LINE_END);

        //ADD SOME CUSTOM ART 
        accountMenuBanner = loadImageToLabel(ARTWORK_PATH + ACCOUNT_MENU_BANNER_FILE);
        accountsScreenCommentsPanel.add(accountMenuBanner);

        //ADD THE TABLE TO ITS PANEL
        accountsScreenTablePanel.add(scrollPane, BorderLayout.CENTER);
        //CREATE THE SPLITPANE AND ADD THE COMPONENTS ON EACH SIDE
        splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, accountsScreenCommentsPanel, accountsScreenTablePanel);
        splitPane.setDividerLocation(SPLIT_PANE_LEFT_LOCATION);

        //NOW ADD ALL THE SUB-COMPONENTS TO THE MAIN ACCOUTNS SCREEN PANEL
        accountsScreen.add(splitPane, BorderLayout.CENTER);
        accountsScreen.add(accountsScreenButtonPanel, BorderLayout.NORTH);

        //WAIT FOR ALL IMAGES TO LOAD BEFORE EXITING 
        waitForMediaTracker(tracker);

    }
    
    /**
     * 
     * @return 
     */
    public JTable getAccountsTable() {
        return accountsTable;
    }
    
    /**
     * 
     * @param accountsTable 
     */
    public void setAccountsTable(JTable accountsTable) {
        this.accountsTable = accountsTable;
    }
        
    /**
     * Adds the RambleOn style to the passed label.
     *
     * @param label The label to add the RambleOn style to.
     * @param specifyFont Labels may need different fonts so we let that
     * information be specified.
     */
    public void addRambleOnStyleToLabel(JLabel label, Font specifyFont, boolean borderOn, Color color) {
        //GIVE EACH LABEL THE RAMBLE ON STYLE AS SPECIFIED
        label.setForeground(color);
        //ONLY ADD BORDER IF SPECIFIED
        if (borderOn) {
            label.setBorder(TOOLBAR_BORDER);
        }
        label.setFont(specifyFont);
    }

    /**
     * Creates the current account screen.
     */
    public void initCurrentAccountScreen() {
        //CREATE ALL THE OBJECTS NEEDED FOR THE CURRENT ACCOUNT SCREEN
        MediaTracker tracker = new MediaTracker(window);
        currentAccountScreen = new JPanel();
        regionsPlayedTreePanel = new JPanel();
        currentAccountStatsPanel = new JPanel();
        currentAccountButtonPanel = new JPanel();
        currentAccountTitlePanel = new JPanel();
        splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, regionsPlayedTreePanel, currentAccountStatsPanel);
        regionsPlayedTree = new JTree();
        backToAccountsLabel = new JLabel(BACK_TO_ACCOUNTS_PAGE_LABEL);
        playRambleOnLabel = new JLabel(FOWARD_TO_GAME_MODE_LABEL);
        currentAccountPageHeaderLabel = new JLabel(CURRENT_ACCOUNT_PAGE_TITLE_HEADER);

        //GIVE THE LABELS THE RAMBLE ON STYLE
        addRambleOnStyleToLabel(playRambleOnLabel, LABEL_FONT, false, RAMBLE_ON_GREEN);
        addRambleOnStyleToLabel(backToAccountsLabel, LABEL_FONT, false, RAMBLE_ON_GREEN);
        addRambleOnStyleToLabel(currentAccountPageHeaderLabel, HEADER_FONT, true, RAMBLE_ON_GREEN);

        //INIT THE TREE
        initTree();

        //SET THE COMPONENTS USING THE RAMBLE ON COLOR SCHEME
        currentAccountStatsPanel.setBackground(RAMBLE_ON_BLUE);
        regionsPlayedTreePanel.setBackground(RAMBLE_ON_BLUE);
        currentAccountButtonPanel.setBackground(RAMBLE_ON_BLUE);
        regionsPlayedTree.setBackground(RAMBLE_ON_BLUE);
        currentAccountTitlePanel.setBackground(RAMBLE_ON_BLUE);

        //SET THE BORDER FOR THE COMPONENTS
        currentAccountScreen.setBorder(TOOLBAR_BORDER);
        regionsPlayedTreePanel.setBorder(TOOLBAR_BORDER);
        currentAccountStatsPanel.setBorder(TOOLBAR_BORDER);
        currentAccountButtonPanel.setBorder(TOOLBAR_BORDER);
        currentAccountTitlePanel.setBorder(TOOLBAR_BORDER);
        regionsPlayedTree.setBorder(TOOLBAR_BORDER);
        splitPane.setBorder(TOOLBAR_BORDER);

        //SET THE LAYOUT MANAGERS FOR THE COMPONENTS THAT NEED IT
        currentAccountScreen.setLayout(new BorderLayout());
        currentAccountStatsPanel.setLayout(new BorderLayout());

        //NOW FILL THE TREE WITH THE PERTENT DATA FOR THIS ACCOUNT
        initRegionsPlayedTree();
        //AND ADD IT TO THE SCROLL PANE
        regionsPlayedTreePanel.add(scrollPane);

        //HANDLES EVENTS FOR ALL BUTTONS IN THE CURRENT ACCOUNT SCREEN
        CurrentAccountButtonsHandler currentAccountButtonsHandler = new CurrentAccountButtonsHandler(this);

        //ADD THE BUTTONS FOR THIS SCREEN
        backToAccountsButton = initGenericButton(ARTWORK_PATH + CURRENT_ACCOUNT_BACK_BUTTON_FILE, tracker, 0, BACK_BUTTON_TOOLTIP, currentAccountButtonsHandler);
        toGameModeButton = initGenericButton(ARTWORK_PATH + CURRENT_ACCOUNT_START_BUTTON_FILE, tracker, 1, PLAY_BUTTON_TOOLTIP, currentAccountButtonsHandler);

        //THE BUTTON PANEL FOR THE CURRENT ACCOUNT SCREEN
        currentAccountTitlePanel.add(currentAccountPageHeaderLabel);
        currentAccountButtonPanel.add(currentAccountTitlePanel);
        currentAccountButtonPanel.add(backToAccountsButton);
        currentAccountButtonPanel.add(backToAccountsLabel);
        currentAccountButtonPanel.add(toGameModeButton);
        currentAccountButtonPanel.add(playRambleOnLabel);

        //ADD ALL THE SUB COMPONENTS TO THE MAIN SCREEN PANEL
        currentAccountScreen.add(currentAccountButtonPanel, BorderLayout.NORTH);
        currentAccountScreen.add(splitPane);
        splitPane.setDividerLocation(SPLIT_PANE_LEFT_LOCATION - 225);

        //LABELS FOR THE TABLE
        subRegionModeLabel = new JLabel(SUB_REGION_MODE_LABEL);
        addRambleOnStyleToLabel(subRegionModeLabel, STATS_TABLE_LABEL_FONT, false, RAMBLE_ON_GREEN);
        capitalModeLabel = new JLabel(CAPITAL_MODE_LABEL);
        addRambleOnStyleToLabel(capitalModeLabel, STATS_TABLE_LABEL_FONT, false, RAMBLE_ON_GREEN);
        leaderModeLabel = new JLabel(LEADER_MODE_LABEL);
        addRambleOnStyleToLabel(leaderModeLabel, STATS_TABLE_LABEL_FONT, false, RAMBLE_ON_GREEN);
        flagModeLabel = new JLabel(FLAG_MODE_LABEL);
        addRambleOnStyleToLabel(flagModeLabel, STATS_TABLE_LABEL_FONT, false, RAMBLE_ON_GREEN);
        fastestTimeLabel = new JLabel(FASTEST_TIME_STAT_LABEL);
        addRambleOnStyleToLabel(fastestTimeLabel, STATS_TABLE_LABEL_FONT, false, RAMBLE_ON_GREEN);
        timesPlayedLabel = new JLabel(TIMES_PLAYES_STAT_LABEL);
        addRambleOnStyleToLabel(timesPlayedLabel, STATS_TABLE_LABEL_FONT, false, RAMBLE_ON_GREEN);
        highScoreLabel = new JLabel(HIGH_SCORE_STAT_LABEL);
        addRambleOnStyleToLabel(highScoreLabel, STATS_TABLE_LABEL_FONT, false, RAMBLE_ON_GREEN);
        //WELL LOAD THESE TO LABELS FROM FILE SO WE CAN USE AN CUSTOM ART
        currentAccountIcon = loadImageToLabel(ARTWORK_PATH + STACK_THE_STATES_ICON_FILE);
        currentPlayerStatsLabel = loadImageToLabel(ARTWORK_PATH + CURRENT_ACCOUNT_STATS_TITLE_FILE);
        currentPlayerStatsLabel.setBorder(TOOLBAR_BORDER);

        //WELL USE GRIDBAGLAYOUT TO ARRANGE THE TABLE AND TABLE LABELS
        currentAccountStatsPanel.setLayout(new GridBagLayout());
        //WELL CONSTRUCT OUR OWN TABLE AND THEN PARSE IT WITH THE DATA FROM
        //THE CURRENT USERS TABLES WHEN A REGION IS SPECIFIED 
        statsTable = new JTable(new AbstractModeStatsTableModel());

        //ADD SOME TABLE SPECIFIC STYLE
        statsTable.setRowHeight(STATS_TABLE_ROW_HEIGHT);
        statsTable.setBorder(TOOLBAR_BORDER);
        statsTable.setBackground(Color.WHITE);
        statsTable.setFont(LABEL_FONT);
        statsTable.setForeground(Color.red);
        //ADD THE COMPONENTS USING GRIDBAGLAYOUT
        addComponentToAccountStatsPanel(statsTable, 4, 6, 3, 5);
        //ADD THE GAME ICON TO THE TOP LEFT CORNER
        addComponentToAccountStatsPanel(currentAccountIcon, 2, 0, 1, 1);
        addComponentToAccountStatsPanel(currentPlayerStatsLabel, 5, 0, 1, 1);
        addComponentToAccountStatsPanel(subRegionModeLabel, 2, 6, 1, 1);
        addComponentToAccountStatsPanel(capitalModeLabel, 2, 7, 1, 1);
        addComponentToAccountStatsPanel(leaderModeLabel, 2, 8, 1, 1);
        addComponentToAccountStatsPanel(flagModeLabel, 2, 9, 1, 1);
        addComponentToAccountStatsPanel(fastestTimeLabel, 4, 4, 1, 1);
        addComponentToAccountStatsPanel(timesPlayedLabel, 5, 4, 1, 1);
        addComponentToAccountStatsPanel(highScoreLabel, 6, 4, 1, 1);

        //WAIT FOR ALL THE IMAGES TO FINISH LOADING BEFORE RETURNING
        waitForMediaTracker(tracker);
    }

    /**
     *
     * @param statsForRegion
     */
    public void updateTable(AccountStatistics statsForRegion) {
        //THE TABLE OF STATS FOR THE SELECTED REGION FOR THE CURRENT PLAYER
        JTable tbl = statsForRegion.getModeStats();

        //TRANSFER THE VALUES IN THE CURRENT PLAYERS TABLE FOR THE SELECTED REGION
        //INTO THE CURRENT ACCOUNT STATS TABLE VISIBLE ON THE CURRENT ACCOUNT SCREEN
        for (int i = 0; i < NUM_GAME_MODES; i++) {
            for (int j = 0; j < NUM_GAME_STATS; j++) {
                statsTable.setValueAt(tbl.getValueAt(i, j), i, j);
            }
        }
    }
    
    /**
     * 
     * @return 
     */
    public JTree getRegionsPlayedTree() {
        return regionsPlayedTree;
    }
    
    /**
     * 
     * @param regionsPlayedTree 
     */
    public void setRegionsPlayedTree(JTree regionsPlayedTree) {
        this.regionsPlayedTree = regionsPlayedTree;
    }
    
    /**
     *
     * @return
     */
    public JTable getStatsTable() {
        return statsTable;
    }

    /**
     *
     * @param statsTable
     */
    public void setStatsTable(JTable statsTable) {
        this.statsTable = statsTable;
    }

    private void addComponentToAccountStatsPanel(Component componentToAdd, int col, int row, int colSpan, int rowSpan) {
        // EMPLOY GRID BAG LAYOUT TO PUT IT IN THE PANEL
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = col;
        gbc.gridy = row;
        gbc.gridwidth = colSpan;
        gbc.gridheight = rowSpan;
        gbc.ipadx = IPADX;
        gbc.ipady = IPADY;
        gbc.insets = INSETS;
        gbc.fill = GridBagConstraints.BOTH;
        currentAccountStatsPanel.add(componentToAdd, gbc);
    }

    /**
     * Creates the new account creation screen.
     */
    public void initAccountCreationScreen() {
        
    }

    /**
     * Initializes the tree with the proper data, including setting up the
     * tree's data model.
     *
     * NOTE - THIS METHOD IS INCOMPLETE AS IS THE STATE OF THIS APPLICATION. FOR
     * NOW OUR TREE WILL JUST CONSIST OF ONE BRANCH WITH THE NAMES OF ALL
     * REGIONS "PLAYED" ON IT. ONCE WE HAVE THE WORLD DATA IN HW6 WE CAN KEEP
     * THE TREE IN A MORE LOGICALLY ORDERED STATE BY WORLD, CONTINENT, COUNTRY,
     * STATE, ETC.
     */
    public void initRegionsPlayedTree() {
        //CREATE THE ROOT OF THE TREE WHICH WELL JUST USE THE NAME OF THE TREE FOR FOR NOW
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(REGIONS_PLAYED_ROOT_LABEL);

        // IF FIRST TIME, MAKE MODEL
        if (regionsPlayedTreeModel == null) {
            regionsPlayedTreeModel = new DefaultTreeModel(root);
            regionsPlayedTree.setModel(regionsPlayedTreeModel);
        } else {
            regionsPlayedTreeModel.setRoot(root);
        }

        //GET THE LIST OF REGIONS PLAYED FOR THE CURRENT USER AND SORT IT
        Collections.sort(accountsManager.getCurrentAccount().getRegionsPlayed());

        // BUILD THE REST OF THE TREE
        Iterator<String> regionsPlayedIterator = accountsManager.getCurrentAccount().getRegionsPlayed().iterator();
        while (regionsPlayedIterator.hasNext()) {
            //ADD EVERY REGION THE CURRENT USER HAS PLAYED TO THE TREE
            addSubRegionsToTree(regionsPlayedIterator.next(), root);
        }
        //MAKE THE ROOT NODE THE INITIAL SELECTED NODE
        selectRootNode();
    }

    /**
     * Selects the root node in the tree and opens the tree to display its
     * children.
     */
    public void selectRootNode() {
        regionsPlayedTree.setSelectionRow(0);
        openFirstRowOfWorldTree();
    }

    /**
     * This method opens all the child nodes of the root. We use this when the
     * application first starts.
     */
    public void openFirstRowOfWorldTree() {
        regionsPlayedTree.expandRow(0);
    }

    /**
     *
     *
     * @param regionToAdd
     * @param parentNode
     *
     * NOTE - THIS METHOD IS INCOMPLETE AS IS THE STATE OF THIS APPLICATION. FOR
     * NOW OUR TREE WILL JUST CONSIST OF ONE BRANCH WITH THE NAMES OF ALL
     * REGIONS "PLAYED" ON IT. ONCE WE HAVE THE WORLD DATA IN HW6 WE CAN KEEP
     * THE TREE IN A MORE LOGICALLY ORDERED STATE BY WORLD, CONTINENT, COUNTRY,
     * STATE, ETC.
     */
    private void addSubRegionsToTree(String regionToAdd, DefaultMutableTreeNode parentNode) {
        //CREATE A TREE NODE OF THE REGION TO ADD TO THE REGIONS PLAYED TREE
        DefaultMutableTreeNode regionPlayedNode = new DefaultMutableTreeNode(regionToAdd);
        //THEN INSERT THAT NODE INTO THE TREE
        regionsPlayedTreeModel.insertNodeInto(regionPlayedNode, parentNode, parentNode.getChildCount());
    }

    /**
     * Initializes the world tree, loading it with the geographic data currently
     * found inside the data manager. Note that this method is only called once,
     * after a world data XML file is loaded.
     */
    private void initTree() {
        // INIT THE TREE
        regionsPlayedTree = new JTree();
        regionsPlayedTree.setForeground(Color.red);
        regionsPlayedTree.setBackground(RAMBLE_ON_BLUE);
        regionsPlayedTree.setFont(LABEL_FONT);

        // MAKE IT SCROLLABLE
        scrollPane = new JScrollPane(regionsPlayedTree);

        // AND HOOK UP THE TREE LISTENER
        WorldTreeHandler treeHandler = new WorldTreeHandler(this);
        regionsPlayedTree.addTreeSelectionListener(treeHandler);
    }

    /**
     * Creates and returns a JLabel with the image given by the file name.
     *
     * @param filePath The file path to the image we are adding to a label.
     * @return The label with the image added to it.
     */
    private JLabel loadImageToLabel(String filePath) {
        //THE LABEL WELL ADD OUR IMAGE TO
        JLabel label = null;

        try {
            //READ IN THE IMAGE FROM THE SPECIFIED FILE
            BufferedImage myPicture = ImageIO.read(new File(filePath));

            //AND ADD IT TO THE LABEL
            label = new JLabel(new ImageIcon(myPicture));
        } catch (IOException a) {
            a.printStackTrace();
        }
        //RETURN THE LABEL 
        return label;
    }

    /**
     * Creates the applications welcome screen.
     */
    private void initWelcomeScreen() {
        //CREATE ALL THE COMPONENTS NEEDED FOR THE WELCOME SCREEN
        MediaTracker tracker = new MediaTracker(window);
        welcomeScreen = new JPanel();

        //SET THE LAYOUTS FOR ANY COMPONENTS THAT NEED ONE
        welcomeScreen.setLayout(new BorderLayout());

        //CREATE THE HANDLER TO HANDLE EVENTS FOR THIS SCREEN
        WelcomePageHandler welcomeHandler = new WelcomePageHandler(this);

        //THE WELCOME SCREEN WILL CONSIST OF A WELCOME PAGE IMAGE THAT IS ONE LARGE BUTTON
        welcomeScreenButton = initGenericButton(ARTWORK_PATH + WELCOME_SCREEN_FILE, tracker, 0, WELCOME_SCREEN_TOOLTIP, welcomeHandler);

        //ADD ALL THE COMPONENTS TO THE MAIN PANEL
        welcomeScreen.add(welcomeScreenButton, BorderLayout.CENTER);

        //WAIT FOR ANY IMAGES TO LOAD BEFORE WE RETURN
        waitForMediaTracker(tracker);
    }

    /**
     * To start the application we load the WelcomeScreen. The event handling
     * takes care of going from one screen to the next.
     */
    public void startApp() {
        //THE APP STARTS FROM THE WELCOME SCREEN AND PROGRESSES 
        window.add(welcomeScreen, BorderLayout.CENTER);
        //SET THE MENU FRAME TO VISIBLE 
        window.setVisible(true);
    }

    /**
     * Refreshes the window after removing one panel and adding another when
     * going to and from the different game screens.
     */
    public void refreshWindow() {
        //REPAINT THE WINDOW AFTER AN UPDATE OF COMPONENTS IN THE CURRENT WINDOW
        window.repaint();
        //AND REVALIDATE IT 
        window.revalidate();
    }

    /**
     *
     * @return
     */
    public JFrame getWindow() {
        return window;
    }

    /**
     *
     * @param window
     */
    public void setWindow(JFrame window) {
        this.window = window;
    }

    /**
     *
     * @return
     */
    public JPanel getWelcomeScreen() {
        return welcomeScreen;
    }

    /**
     *
     * @param welcomeScreen
     */
    public void setWelcomeScreen(JPanel welcomeScreen) {
        this.welcomeScreen = welcomeScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getAccountsScreen() {
        return accountsScreen;
    }

    /**
     *
     * @param AccountsScreen
     */
    public void setAccountsScreen(JPanel AccountsScreen) {
        this.accountsScreen = AccountsScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getAccountCreationScreen() {
        return accountCreationScreen;
    }

    /**
     *
     * @param accountCreationScreen
     */
    public void setAccountCreationScreen(JPanel accountCreationScreen) {
        this.accountCreationScreen = accountCreationScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getCurrentAccountScreen() {
        return currentAccountScreen;
    }

    /**
     *
     * @param currentAccountScreen
     */
    public void setCurrentAccountScreen(JPanel currentAccountScreen) {
        this.currentAccountScreen = currentAccountScreen;
    }

    /**
     *
     * @return
     */
    public JButton getWelcomeScreenButton() {
        return welcomeScreenButton;
    }

    /**
     *
     * @param welcomeScreenButton
     */
    public void setWelcomeScreenButton(JButton welcomeScreenButton) {
        this.welcomeScreenButton = welcomeScreenButton;
    }
}
