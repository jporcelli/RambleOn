package rambleon;

import accountdata.AbstractActiveAccountsTableModel;
import accountdata.AccountDataManager;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagLayout;
import static rambleon.RambleOnSettings.*;
import java.awt.Image;
import java.awt.Insets;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeModel;
import rambleonevents.AccountSelectionHandler;
import rambleonevents.CreateAccountButtonHandler;
import rambleonevents.WelcomePageHandler;

/**
 *
 * @author James C. Porcelli
 */
public class RambleOnScreenManager {

    //COMPONENTS USED FOR THE GAME SCREENS
    private JFrame window;
    private JPanel welcomeScreen, accountsScreen, accountCreationScreen, currentAccountScreen,
            accountsScreenTablePanel, accountsScreenButtonPanel, accountsScreenCommentsPanel,
            accountsScreenTitlePanel, worldTreePanel, currentAccountStatsPanel, currentAccountButtonPanel;
    private JButton welcomeScreenButton, newUserAccountButton, accountCreationOk, accountCreationCancel;
    private JSplitPane splitPane;
    private JLabel accountsPageHeaderLabel, createNewUserLabel, accountMenuBanner;
    private JTree worldTree;
    private DefaultTreeModel worldTreeModel;
    private JTextField newUserName;
    AccountDataManager accountsManager;

    /**
     *
     */
    public RambleOnScreenManager() {
        window = new JFrame("RambleOn");
        window.setSize(GAME_WIDTH, GAME_HEIGHT);
        window.setResizable(false);
        window.setLayout(new BorderLayout());

        accountsManager = new AccountDataManager();
        initWelcomeScreen();
        initAccountsScreen();

        //TEMPORARY DURING BETA
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    public AccountDataManager getAccountsManager() {
        return accountsManager;
    }

    /**
     * This method helps us load a bunch of images and ensure they are fully
     * loaded when we want to use them.
     *
     * @param imageFile The path and name of the image file to load.
     *
     * @param tracker This will help ensure all the images are loaded.
     *
     * @param id A unique identifier for each image in the tracker. It will only
     * wait for ids it knows about.
     *
     * @return A constructed image that has been registered with the tracker.
     * Note that the image's data has not necessarily been fully loaded when
     * this method ends.
     */
    private Image batchLoadImage(String imageFile, MediaTracker tracker, int id) {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Image img = tk.getImage(imageFile);
        tracker.addImage(img, id);
        return img;
    }

    /**
     * Sets up everything a button needs except how it is laid out, since we'll
     * have buttons put in toolbars that use FlowLayout and our regions editor,
     * which uses GridBagLatout.
     *
     * @param imageFile The image to use for the button.
     *
     * @param parent The container inside which to put the button. Note that for
     * this GUI, we'll always assume FlowLayout.
     *
     * @param tracker This makes sure our button fully loads.
     *
     * @param id A unique id for the button so the tracker knows it's there.
     *
     * @param tooltip The mouse-over text for the button.
     *
     * @param eventHandler The listener that will respond to presses on this
     * button.
     *
     * @return A fully constructed and initialized button with all the data
     * provided to it as arguments. Note that it has not been laid out inside a
     * container yet, as that will be a custom operation.
     */
    private JButton initGenericButton(String imageFile,
            MediaTracker tracker,
            int id,
            String tooltip,
            ActionListener eventHandler) {
        // LOAD THE IMAGE AND MAKE AN ICON
        Image img = batchLoadImage(imageFile, tracker, id);
        ImageIcon ii = new ImageIcon(img);

        // MAKE THE BUTTON THAT WE'LL END UP RETURNING
        JButton createdButton = new JButton();

        // NOW SETUP OUR BUTTON FOR USE

        // GIVE IT THE ICON
        createdButton.setIcon(ii);

        // GIVE IT THE MOUSE-OVER TEXT
        createdButton.setToolTipText(tooltip);

        // INSETS ARE SPACING INSIDE THE BUTTON,
        // TOP LEFT RIGHT BOTTOM
        Insets buttonMargin = new Insets(
                BUTTON_INSET, BUTTON_INSET, BUTTON_INSET, BUTTON_INSET);
        createdButton.setMargin(buttonMargin);

        // INIT THE EVENT HANDLERS - NOTE WE'RE USING THE TOOLTIP
        // AS THE ACTION COMMAND SINCE THEY ARE UNIQUE FOR EACH BUTTON
        createdButton.setActionCommand(tooltip);
        createdButton.addActionListener(eventHandler);

        // AND RETURN THE CREATED BUTTON
        return createdButton;
    }

    /**
     * Create and initialize the accounts screen panel.
     */
    private void initAccountsScreen() {
        accountsScreen = new JPanel();
        accountsScreenTablePanel = new JPanel();
        accountsScreenButtonPanel = new JPanel();
        accountsScreenCommentsPanel = new JPanel();
        accountsScreenTitlePanel = new JPanel();

        accountsScreenButtonPanel.setBorder(TOOLBAR_BORDER);
        accountsScreenTablePanel.setBorder(TOOLBAR_BORDER);
        accountsScreenCommentsPanel.setBorder(TOOLBAR_BORDER);
        accountsScreenTitlePanel.setBorder(TOOLBAR_BORDER);

        accountsScreen.setLayout(new BorderLayout());
        accountsScreenTablePanel.setLayout(new BorderLayout());
        accountsScreenButtonPanel.setLayout(new BorderLayout());
        accountsScreenCommentsPanel.setLayout(new GridBagLayout());

        MediaTracker tracker = new MediaTracker(window);
        CreateAccountButtonHandler createAccountButtonHandler = new CreateAccountButtonHandler(this);
        AccountSelectionHandler accountSelectionHandler = new AccountSelectionHandler(this);

        newUserAccountButton = initGenericButton(ARTWORK_PATH + NEW_ACCOUNT_BUTTON_ICON_FILE, tracker, 0, NEW_USER_TOOLTIP, createAccountButtonHandler);
        newUserAccountButton.setBorder(TOOLBAR_BORDER);

        createNewUserLabel = new JLabel(CREATE_NEWUSER_LABEL);
        createNewUserLabel.setBorder(TOOLBAR_BORDER);
        createNewUserLabel.setFont(CREATE_NEWUSER_LABEL_FONT);
        createNewUserLabel.setForeground(new Color(116, 220, 89));

        accountsScreenButtonPanel.add(createNewUserLabel);
        accountsScreenButtonPanel.setBackground(new Color(3, 44, 152));
        accountsScreenButtonPanel.add(newUserAccountButton, BorderLayout.LINE_START);

        JTable table = new JTable(new AbstractActiveAccountsTableModel(accountsManager.getUserNames()));
        table.getSelectionModel().addListSelectionListener(accountSelectionHandler);
        table.setPreferredScrollableViewportSize(new Dimension(500, 400));
        table.setFillsViewportHeight(true);
        table.setAutoCreateRowSorter(true);
        table.setRowHeight(60);

        table.setBackground(new Color(3, 44, 152));
        table.setFont(ACCOUNTS_PAGE_HEADER_FONT);
        table.setForeground(Color.red);

        JScrollPane scrollPane = new JScrollPane(table);

        accountsPageHeaderLabel = new JLabel(ACCOUNTS_PAGE_TITLE_HEADER);
        accountsPageHeaderLabel.setForeground(new Color(116, 220, 89));
        accountsPageHeaderLabel.setBorder(TOOLBAR_BORDER);
        accountsPageHeaderLabel.setFont(ACCOUNTS_PAGE_HEADER_FONT);

        accountsScreenTitlePanel.add(accountsPageHeaderLabel);
        accountsScreenTitlePanel.setBackground(new Color(3, 44, 152));

        accountsScreenButtonPanel.add(accountsScreenTitlePanel, BorderLayout.LINE_END);

        accountMenuBanner = loadImageToLabel(ARTWORK_PATH + ACCOUNT_MENU_BANNER_FILE);

        accountsScreenCommentsPanel.add(accountMenuBanner);

        accountsScreenTablePanel.add(scrollPane, BorderLayout.CENTER);
        splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, accountsScreenCommentsPanel, accountsScreenTablePanel);
        splitPane.setDividerLocation(SPLIT_PANE_LEFT_LOCATION);

        accountsScreen.add(splitPane, BorderLayout.CENTER);
        accountsScreen.add(accountsScreenButtonPanel, BorderLayout.NORTH);

    }

    /**
     *
     */
    public void initCurrentAccountScreen() {
        currentAccountScreen = new JPanel();
        worldTreePanel = new JPanel();
        currentAccountStatsPanel = new JPanel();
        currentAccountButtonPanel = new JPanel();
    }

    /**
     *
     * @param filePath
     * @return
     */
    private JLabel loadImageToLabel(String filePath) {
        JLabel label = null;

        try {
            BufferedImage myPicture = ImageIO.read(new File(filePath));
            label = new JLabel(new ImageIcon(myPicture));
        } catch (IOException a) {
            a.printStackTrace();
        }

        return label;
    }

    /**
     * Create and initialize the welcome screen panel.
     */
    private void initWelcomeScreen() {
        welcomeScreen = new JPanel();

        welcomeScreen.setLayout(new BorderLayout());

        MediaTracker tracker = new MediaTracker(window);
        WelcomePageHandler welcomeHandler = new WelcomePageHandler(this);

        //THE WELCOME SCREEN WILL CONSIST OF A WELCOME PAGE IMAGE THAT IS ONE LARGE BUTTON
        welcomeScreenButton = initGenericButton(ARTWORK_PATH + WELCOME_SCREEN_FILE, tracker, 0, WELCOME_SCREEN_TOOLTIP, welcomeHandler);

        welcomeScreen.add(welcomeScreenButton, BorderLayout.CENTER);

    }

    /**
     * To start the application we load the WelcomeScreen. The event handling
     * takes care of going from one screen to the next.
     */
    public void startApp() {
        //THE APP STARTS FROM THE WELCOME SCREEN AND PROGRESSES 
        window.add(welcomeScreen, BorderLayout.CENTER);
        window.setVisible(true);
    }

    /**
     * Refreshes the window after removing one panel and adding another when
     * going to and from the different game screens.
     */
    public void refreshWindow() {
        window.repaint();
        window.revalidate();
    }

    /**
     *
     * @return
     */
    public JFrame getWindow() {
        return window;
    }

    /**
     *
     * @param window
     */
    public void setWindow(JFrame window) {
        this.window = window;
    }

    /**
     *
     * @return
     */
    public JPanel getWelcomeScreen() {
        return welcomeScreen;
    }

    /**
     *
     * @param welcomeScreen
     */
    public void setWelcomeScreen(JPanel welcomeScreen) {
        this.welcomeScreen = welcomeScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getAccountsScreen() {
        return accountsScreen;
    }

    /**
     *
     * @param AccountsScreen
     */
    public void setAccountsScreen(JPanel AccountsScreen) {
        this.accountsScreen = AccountsScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getAccountCreationScreen() {
        return accountCreationScreen;
    }

    /**
     *
     * @param accountCreationScreen
     */
    public void setAccountCreationScreen(JPanel accountCreationScreen) {
        this.accountCreationScreen = accountCreationScreen;
    }

    /**
     *
     * @return
     */
    public JPanel getCurrentAccountScreen() {
        return currentAccountScreen;
    }

    /**
     *
     * @param currentAccountScreen
     */
    public void setCurrentAccountScreen(JPanel currentAccountScreen) {
        this.currentAccountScreen = currentAccountScreen;
    }

    /**
     *
     * @return
     */
    public JButton getWelcomeScreenButton() {
        return welcomeScreenButton;
    }

    /**
     *
     * @param welcomeScreenButton
     */
    public void setWelcomeScreenButton(JButton welcomeScreenButton) {
        this.welcomeScreenButton = welcomeScreenButton;
    }
}
