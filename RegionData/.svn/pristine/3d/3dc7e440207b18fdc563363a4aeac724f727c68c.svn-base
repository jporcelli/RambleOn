package regiondata;

import java.awt.HeadlessException;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import regiondata.Region;
import regiondata.RegionType;
import regiondata.RegionDataManager;
import regiondata.RegionImporter;
import static regiondata.RegionIOSettings.*;
import xml_utilities.XMLUtilities;

/**
 * This class serves as a plug-in for reading and writing regions to and from
 * XML files using RegionDataSchema.XSD
 *
 * @author James C. Porcelli, SBU ID # 108900819
 */
public class RegionIO implements RegionImporter {
    // THIS WILL HELP US PARSE THE XML FILES

    private XMLUtilities xmlUtil;
    // THIS IS THE SCHEMA WE'LL USE
    private File regionDataSchema;

    /**
     * Constructor for making our importer/exporter. Note that it initializes
     * the XML utility for processing XML files and it sets up the schema for
     * use.
     */
    public RegionIO(File regionDataSchema) {
        xmlUtil = new XMLUtilities();

        // WE'LL USE THE SCHEMA FILE TO VALIDATE THE XML FILES
        this.regionDataSchema = regionDataSchema;
    }

    /**
     * Loads the region data from the specified XML region data file into the
     * regions manager.
     *
     * @param regionsFile The XML file to load the data from.
     *
     * @param regionsManager The manager which we will load the requested region
     * information from the XML file into.
     *
     * @return true if the region data loads successfully, false otherwise.
     */
    @Override
    public boolean loadRegion(File regionsFile, RegionDataManager regionsManager) {

        try {
            // FIRST LOAD ALL THE XML INTO A TREE
            Document doc = xmlUtil.loadXMLDocument(regionsFile.getAbsolutePath(),
                    regionDataSchema.getAbsolutePath());

            // THEN LET'S LOAD THE LIST OF ALL THE SUB REGINS
            loadRegionsList(doc, regionsManager);

            // AND NOW CONNECT ALL THE REGIONS TO EACH OTHER
            loadRegionsMappings(doc, regionsManager);
        } catch (Exception e) {
            //PRINT THE MESSAGE ASSOCIATED WITH THE EXCEPTION THAT WAS THROWN
            System.out.println(e.getMessage());
            // WORLD DIDN'T LOAD PROPERLY
            return false;
        }
        // WORLD LOADED PROPERLY
        return true;
    }

    /**
     * Private helper method for loading region data. This method loads the
     * complete list of regions for the specified file which would be the parent
     * region, i.e the World, Africa, etc.
     *
     * @param doc The hierarchical Regions data loaded from an XML file into a
     * Document, we'll extract the data from this doc and load it into the
     * regions manager.
     *
     * @param regionsManager The data manager for all the regions. We'll load
     * the data in the doc into this object.
     */
    private void loadRegionsList(Document doc, RegionDataManager manager) {
        // EMPTY THE REGIONS LIST
        manager.clearRegions();

        // FIRST GET THE PARENT REGION
        Node parentRegion = doc.getElementsByTagName(REGION_NODE).item(0);
        NamedNodeMap parentRegionAttributes = parentRegion.getAttributes();
        //GET THE PARENT REGION CAPITAL, IF IT EXISTS
        Node capitalNode = parentRegionAttributes.getNamedItem(CAPITAL_ATTRIBUTE);
        Node leaderNode = parentRegionAttributes.getNamedItem(LEADER_ATTRIBUTE);
        Node nameNode = parentRegionAttributes.getNamedItem(NAME_ATTRIBUTE);
        //PARENT REGION
        Region currentRegion;
        //IF PARENT REGION HAS NO CAPITAL AND LEADER THEN WERE LOADING THE WORLD
        if (capitalNode == null && leaderNode == null) {
            //REGION IS THE WORLD
            currentRegion = new Region(nameNode.getNodeValue().toUpperCase(), nameNode.getNodeValue(), RegionType.WORLD);
        } else {
            //REGION IS A NATION
            currentRegion = new Region(nameNode.getNodeValue().toUpperCase(), nameNode.getNodeValue(),
                    RegionType.NATION, capitalNode.getNodeValue(), leaderNode.getNodeValue());
        }

        //ADD THE PARENT REGION TO THE TREE OF REGIONS ACTIVE TO THE APP.
        manager.addRegion(currentRegion);

        // AND THEN GO THROUGH AND ADD ALL THE LISTED SUB REGIONS OF THE PARENT
        ArrayList<Node> regionsList = xmlUtil.getChildNodesWithName(parentRegion, SUB_REGION_NODE);
        for (int i = 0; i < regionsList.size(); i++) {
            // GET THEIR DATA FROM THE DOC
            Node regionNode = regionsList.get(i);
            NamedNodeMap regionAttributes = regionNode.getAttributes();
            //REQUIRED ATTRIBUTES
            String name = regionAttributes.getNamedItem(NAME_ATTRIBUTE).getNodeValue();
            String blue = regionAttributes.getNamedItem(BLUE_ATTRIBUTE).getNodeValue();
            String green = regionAttributes.getNamedItem(GREEN_ATTRIBUTE).getNodeValue();
            String red = regionAttributes.getNamedItem(RED_ATTRIBUTE).getNodeValue();

            //THE TYPE OF THIS SUB REGION
            RegionType regionType;
            //SUB REGION TO ADD
            Region regionToAdd;

            //OPTIONAL ATTRIBUTE (DEPENDS ON THE REGION TYPE)
            capitalNode = regionAttributes.getNamedItem(CAPITAL_ATTRIBUTE);
            if (capitalNode != null) {
                // ALL NATIONS HAVE CAPITALS
                regionType = RegionType.STATE;
                //ADD A 
                regionToAdd = new Region(name.toUpperCase(), name, regionType, capitalNode.getNodeValue(), leaderNode.getNodeValue());
            } else {
                // CONTINENTS DO NOT
                regionType = RegionType.CONTINENT;
                regionToAdd = new Region(name.toUpperCase(), name, regionType);
            }
            // PUT THE REGION IN THE WORLD
            manager.addRegion(regionToAdd);
        }
    }

    /**
     * Private helper method for loading all the region mappings.
     *
     * @param doc The hierarchical Regions data loaded from an XML file into a
     * Document, we'll extract the data from this doc and load it into the
     * world.
     *
     * @param world The data manager for all the regions. We'll load the data in
     * the doc into this object.
     */
    private void loadRegionsMappings(Document doc, WorldDataManager world) {
        // NOW GET THE REGIONS MAPPINGS
        Node regionsMappingsNode = doc.getElementsByTagName(REGIONS_MAPPINGS_NODE).item(0);

        // AND THEN GET THE MAPPINGS
        ArrayList<Node> regionsMapped = xmlUtil.getChildNodesWithName(regionsMappingsNode, REGION_NODE);
        for (int i = 0; i < regionsMapped.size(); i++) {
            // AND THEN GET THEIR SUB REGIONS
            Node regionNode = regionsMapped.get(i);
            String regionID = regionNode.getAttributes().getNamedItem(ID_ATTRIBUTE).getNodeValue();
            Region region = world.getRegion(regionID);

            // MAP ALL THE CHILD NODES TO PARENTS
            // AND PARENTS TO CHILDREN
            ArrayList<Node> subRegionNodes = xmlUtil.getChildNodesWithName(regionNode, SUB_REGION_NODE);
            int numSubRegions = subRegionNodes.size();
            for (int j = 0; j < numSubRegions; j++) {
                Node subRegionNode = subRegionNodes.get(j);
                NamedNodeMap subRegionAttributes = subRegionNode.getAttributes();
                Node subRegionIdNode = subRegionAttributes.getNamedItem(ID_ATTRIBUTE);
                String subRegionID = subRegionIdNode.getNodeValue();
                Region subRegion = world.getRegion(subRegionID);
                region.addSubRegion(subRegion);
                subRegion.setParentRegion(region);
            }
        }
    }
}
